package com.local.volMedical.controller;


import com.local.volMedical.medico.*;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PageableDefault;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/medicos")
public class MedicoController {

    @Autowired
    private MedicoRepository repository;

    @Transactional //cuando el metodo realice cambios en la base de datos
    @PostMapping
    public void registrar(@RequestBody @Valid DatosRegistroMedico datos) {

        var medico = new Medico(datos); // transformamos el DTO en entidad
        repository.save(medico);
    }

    //1-El @RestController con @PostMapping indica que
    // este m√©todo va a responder a peticiones POST en la ruta /medicos

    //2-El @RequestBody DatosRegistroMedico datos le dice a Spring:
    //‚ÄúTom√° el cuerpo del JSON enviado en la request,
    // convert√≠lo en una instancia de DatosRegistroMedico‚Äù

    //3-Spring usa Jackson (que est√° incluido por defecto con Spring Boot)
    // para hacer esta conversi√≥n. Esto se llama deserializaci√≥n JSON ‚Üí objeto Java.

    //En resumen:
    //Lo que hace que funcione es:
    //@RequestBody: le dice a Spring que lea el body como JSON.
    //Jackson: convierte el JSON en un objeto Java.
    //record DatosRegistroMedico: Jackson mapea los datos JSON a los par√°metros del constructor del record por nombre.

    /*@GetMapping
    //Quer√©s devolver una lista de m√©dicos,
    // pero solo mostrando los campos: nombre, email, documento, especialidad (no toda la entidad).
    public List<DatosListaMedico> listar() {

        return repository.findAll()
                .stream()
                .map(DatosListaMedico::new) //idem: .map(medico -> new DatosListaMedico(medico))
                .toList();           //el findAll del repository nos
                                     // devuelve una lista de medicos no el DTO nuevo.
                                     //usamos el stream y el map: para cada item llamamos al constructor.
                                     //// üîÅ Se convierte la entidad Medico al DTO
    }*/

    //Paginaci√≥n y ordenaci√≥n
    @GetMapping
    public Page<DatosListaMedico> listar(@PageableDefault(size = 10, sort = {"nombre"}) Pageable paginacion) {
        //return repository.findAll(paginacion).map(DatosListaMedico::new); sin modificar x el delete
        return repository.findAllByActivoTrue(paginacion).map(DatosListaMedico::new);
    }

    /*Colocaremos esta paginaci√≥n dentro del m√©todo findAll.
      Si hacemos un control P en findAll, uno de los tipos de par√°metros que podemos enviarle
      es pageable. Entonces, le enviaremos nuestra paginaci√≥n.
      Sin embargo, con esta paginaci√≥n, el m√©todo findAll no nos devuelve una lista.
      Antes, sin paginaci√≥n, nos devolv√≠a una lista. Con la paginaci√≥n,
      que es una sobrecarga del m√©todo, nos devolver√° un Page.
      Un Page, adem√°s de contener la lista de m√©dicos, tambi√©n incluye los datos de paginaci√≥n.
      Ahora enfrentamos un problema con el m√©todo toList. Tendremos que eliminarlo,
      ya que convert√≠a todos los cambios que hemos estado haciendo a lista.
      Adem√°s, el Page que nos trae findAll no es compatible con stream.
      Por lo tanto, eliminaremos eso tambi√©n.
      Sin embargo, el Page s√≠ comprende el m√©todo map, por lo que podemos dejarlo as√≠.
      De esta forma, estamos devolviendo un Page.*/

    @Transactional
    @PutMapping
    /*es similar a el post pero no podemos utilizar el DTO DatosRegistroMedico porque
      en ese DTO todos los datos son obligatorios y no coincide con nuestras reglas de negocio para
      el PUT donde indica que solo podemos modificar nombre, tel√©fono y direcci√≥n.
      No podemos modificar correo electr√≥nico, documento ni especialidad. Entonces tendremos que
      crear un nuevo DTO para la actualizaci√≥n*/

    public void actualizar(@RequestBody @Valid DatosActualizacionMedico datos) {

        Medico medico = repository.getReferenceById(datos.id());//obtenemos el medico por el id que fue pasado por el frontend.

        medico.actualizarInformaciones(datos);//creamos el metodo para realizar la actualizaci√≥n

    }

    @Transactional
    @DeleteMapping("/{id}")
    public void eliminar(@PathVariable Long id) {
        //repository.deleteById(id);//esto elimina completamento el medico
                                  // con ese id de la base de datos. Es una eliminaci√≥n fisica.

        Medico medico = repository.getReferenceById(id);

        medico.eliminar();//luego de esto hay que hacer unos cambios en listar
                          // xq sino va a seguir apareciendo el medico inactivo.
    }

}



